{"version":3,"sources":["header/Andrew-Photo-Cropped.jpg","splashLinks/splashLink/splashLink.jsx","splashLinks/splashLinks.jsx","header/header.jsx","App.jsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SplashLink","background","text","position","onClick","expanded","clicked","pageName","clickedClass","className","to","SplashLinks","currentLink","changeCurrentLink","links","map","link","i","key","Header","pageInfo","pageColor","title","backButtonColor","src","Photo","App","useState","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.baaf124c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Andrew-Photo-Cropped.e950cb73.jpg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default function SplashLink({background, text, position, onClick, expanded, clicked, pageName}) { \n  let clickedClass = clicked ? 'clicked' : '';\n  return(\n    <div className={`splash-link ${position}-position ${expanded} ${clickedClass}`}>\n      <Link to={pageName}>\n        <button onClick={onClick} className={`${background}-background ${clickedClass}`}>\n            <h2 className={clicked ? 'fadeOut' : 'fadeIn'}>{text}</h2>\n        </button>\n      </Link>\n    </div>\n  )\n};","import React from 'react';\nimport SplashLink from './splashLink';\n\n\nexport default function SplashLinks({currentLink, changeCurrentLink}) {\n\n  let links = [\n    {\n      background: 'green',\n      text: 'Software Engineer',\n      pageName: 'engineer'\n    },\n    {\n      background: 'white',\n      text: 'Musician',\n      pageName: 'music'\n    },\n    {\n      background: 'orange',\n      text: 'Nerd',\n      pageName: 'nerd'\n    }\n  ]\n\n  let onClick = (currentLink) => () => {changeCurrentLink(currentLink)}\n  let assignExpandedClass = (pageName) => {\n    if (currentLink === 'home') {\n      return 'unexpanded';\n    } else {\n      return pageName === currentLink ? 'expanded' : 'flat';\n    }\n  }\n\n  let generateSplashLinks = () => {\n    return links.map((link, i) => {\n      return (\n        <SplashLink\n          background = {link.background}\n          text = {link.text}\n          position = {i}\n          onClick = {onClick(link.pageName)}\n          clicked = {link.pageName === currentLink}\n          pageName = {link.pageName}\n          currentLink = {currentLink}\n          expanded = {assignExpandedClass(link.pageName)}\n          key={`splashLink${i}`}\n        />\n      )\n    });\n  }\n\n\n  return(\n    <div className={`splash-links`}>\n      {generateSplashLinks()}\n    </div>\n  )\n};","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Photo from './Andrew-Photo-Cropped.jpg';\n\nexport default function Header({currentLink, changeCurrentLink}) {\n  let pageInfo = {\n    'home': {\n      pageColor:'',\n      title: ''\n    },\n    'engineer': {\n      pageColor: 'green',\n      title: 'Software Engineer'\n    },\n    'music': {\n      pageColor: 'white',\n      title: 'Musician'\n    },\n    'nerd': {\n      pageColor: 'orange',\n      title: 'Nerd'\n    }\n  }\n\n  let backButtonColor = currentLink === 'engineer' ? 'white' : pageInfo[currentLink].pageColor\n\n  return (\n    <header className={`header ${pageInfo[currentLink].pageColor}-background-font`}>\n      <div className='andrew-head-cropper'>\n        { currentLink !== 'home' && \n          <p className={`${backButtonColor}-background-font`}>\n            Back\n          </p>\n        }\n        <Link to={\"/\"} onClick={()=> {changeCurrentLink('home')}}>\n          <img \n            className={`andrew-head ${ currentLink === 'home' ? '' : 'clickable'}`} \n            src={Photo}\n          />\n        </Link>\n      </div>\n      <div className=\"andrew-title\">\n        <h1>Andrew Tae</h1>\n        <div className={currentLink === 'home' ? 'title-placeholder' : ''}></div>\n        <h2 className={currentLink === 'home' ? 'fadeOut' : 'fadeIn'}>{pageInfo[currentLink].title}</h2>\n      </div>\n    </header>\n  )\n};","import React, {useState} from 'react';\nimport './App.scss';\nimport SplashLinks from './splashLinks';\nimport Header from './header';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  let [currentLink, changeCurrentLink] = useState('home');\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header currentLink={currentLink} changeCurrentLink={changeCurrentLink}/>\n        <SplashLinks currentLink={currentLink} changeCurrentLink={changeCurrentLink}/>\n        <Switch>\n          <Route path=\"/engineer\" component={()=>{return(<p>Doof</p>)}}/>\n          <Route path=\"/music\" component={()=>{return(<p>Maw</p>)}} />\n          <Route path=\"/nerd\" component={()=>{return(<p>Yuh</p>)}} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}