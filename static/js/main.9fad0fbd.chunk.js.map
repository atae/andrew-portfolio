{"version":3,"sources":["header/Andrew-Photo-Cropped.jpg","splashLinks/splashLink/splashLink.jsx","splashLinks/splashLinks.jsx","header/navbar/navbar.jsx","header/header.jsx","App.jsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SplashLink","background","text","position","onClick","expanded","clicked","pageName","clickedClass","className","to","SplashLinks","currentLink","changeCurrentLink","links","map","link","i","nextLink","key","Navbar","pageInfo","navbarLinks","currentPage","useLocation","pathname","split","pageColor","linkInfo","Header","title","backButtonColor","src","Photo","Page","lazy","App","urlLink","useState","suspendedPage","type","match","fallback","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fad0fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Andrew-Photo-Cropped.e950cb73.jpg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default function SplashLink({background, text, position, onClick, expanded, clicked, pageName}) { \n  let clickedClass = clicked ? 'clicked' : '';\n  return(\n    <div className={`splash-link ${position}-position ${expanded} ${clickedClass}`}>\n      <Link to={`/${pageName}/about`}>\n        <button onClick={onClick} className={`${background}-background ${clickedClass}`}>\n            <h2 className={`${clicked ? 'fadeOut' : 'fadeIn'} ${pageName}`}>{text}</h2>\n        </button>\n      </Link>\n    </div>\n  )\n};","import React from 'react';\nimport SplashLink from './splashLink';\n\n\nexport default function SplashLinks({currentLink, changeCurrentLink}) {\n\n  let links = [\n    {\n      background: 'green',\n      text: 'Software Engineer',\n      pageName: 'engineer'\n    },\n    {\n      background: 'white',\n      text: 'Musician',\n      pageName: 'music'\n    },\n    {\n      background: 'orange',\n      text: 'Nerd',\n      pageName: 'nerd'\n    }\n  ]\n\n  let onClick = (nextLink) => () => { \n    if (currentLink === 'home') {\n      changeCurrentLink(nextLink)\n    }\n  }\n\n  let assignExpandedClass = (pageName) => {\n    if (currentLink === 'home') {\n      return 'unexpanded';\n    } else {\n      return pageName === currentLink ? 'expanded' : 'flat';\n    }\n  }\n\n  let generateSplashLinks = () => {\n    return links.map((link, i) => {\n      return (\n        <SplashLink\n          background = {link.background}\n          text = {link.text}\n          position = {i}\n          onClick = {onClick(link.pageName)}\n          clicked = {link.pageName === currentLink}\n          pageName = {link.pageName}\n          currentLink = {currentLink}\n          expanded = {assignExpandedClass(link.pageName)}\n          key={`splashLink${i}`}\n        />\n      )\n    });\n  }\n\n\n  return(\n    <div className={`splash-links`}>\n      {generateSplashLinks()}\n    </div>\n  )\n};","import React from 'react';\nimport {Link, useLocation} from 'react-router-dom';\n\nexport default function Navbar({currentLink, pageInfo}) { \n  let navbarLinks = {\n    'home' : [],\n    'engineer': [\n      {\n        pageName: 'about',\n        text: 'About',\n      },\n      {\n        pageName: 'portfolio',\n        text: 'Portfolio',\n      },\n      {\n        pageName: 'contact',\n        text: 'Contact'\n      }\n    ],\n    'music': [\n      {\n        pageName: 'about',\n        text: 'About',\n      },\n      {\n        pageName: 'discography',\n        text: 'Discography',\n      },\n      {\n        pageName: 'store',\n        text: 'Store',\n      },\n      {\n        pageName: 'transcriptions',\n        text: 'Sheet Music',\n      },\n      {\n        pageName: 'contact',\n        text: 'Contact'\n      }\n    ],\n    'nerd': [\n      {\n        pageName: 'about',\n        text: 'About',\n      },\n      {\n        pageName: 'japanese',\n        text: '日本語'\n      },\n      {\n        pageName: 'gaming',\n        text: 'Gaming'\n      },\n      {\n        pageName: 'blog',\n        text: 'Blog'\n      }\n    ]\n  }\n  let currentPage = useLocation().pathname.split('/')[2]\n\n  let generateLinks = () => {\n    return navbarLinks[currentLink].map(linkInfo => {\n      return (<li>\n        <Link \n          className={linkInfo.pageName === currentPage ? 'active' : ''}\n          to={`/${currentLink}/${linkInfo.pageName}`}\n        >\n          {linkInfo.text}\n        </Link>\n      </li>)\n    })\n  }\n\n  return (\n    <nav className={`navbar-container ${currentLink === 'home' ? 'fadeOut' : 'fadeIn'}`}>\n      <ul className={`navbar-list ${pageInfo.pageColor}-background-font`}>\n        {generateLinks()}\n      </ul>\n    </nav>\n  )\n};\n","import React from 'react';\nimport Navbar from './navbar';\nimport {Link} from 'react-router-dom';\nimport Photo from './Andrew-Photo-Cropped.jpg';\n\nexport default function Header({currentLink, changeCurrentLink}) {\n  let pageInfo = {\n    'home': {\n      pageColor:'',\n      title: ''\n    },\n    'engineer': {\n      pageColor: 'green',\n      title: 'Software Engineer'\n    },\n    'music': {\n      pageColor: 'white',\n      title: 'Musician'\n    },\n    'nerd': {\n      pageColor: 'orange',\n      title: 'Nerd'\n    }\n  }\n\n  let backButtonColor = currentLink === 'engineer' ? 'white' : pageInfo[currentLink].pageColor\n  return (\n    <header className={`header ${pageInfo[currentLink].pageColor}-background-font`}>\n      <div className=\"info-container\">\n        <div className='andrew-head-cropper'>\n          { currentLink !== 'home' && \n            <p className={`${backButtonColor}-background-font`}>\n              Back\n            </p>\n          }\n          <Link to={\"/\"} className={currentLink === 'home' ? 'disable-link' : ''} onClick={()=> {changeCurrentLink('home')}}>\n            <img \n              className={`andrew-head ${ currentLink === 'home' ? '' : 'clickable'}`} \n              src={Photo}\n              />\n          </Link>\n        </div>\n        <div className=\"andrew-title\">\n          <h1>Andrew Tae</h1>\n          <div className={currentLink === 'home' ? 'title-placeholder' : ''}></div>\n          {/* <h2 className={currentLink === 'home' ? 'fadeOut' : 'fadeIn'}>{pageInfo[currentLink].title}</h2> */}\n        </div>\n      </div>\n      <Navbar pageInfo={pageInfo[currentLink]} currentLink={currentLink}/>\n    </header>\n  )\n};","import React, {useState, Suspense, lazy} from 'react';\nimport './App.scss';\nimport SplashLinks from './splashLinks';\nimport Header from './header';\nimport {\n  Switch,\n  Route,\n  useLocation\n} from \"react-router-dom\";\n\nconst Page = lazy(() => import('./page'));\n\n\nfunction App() {\n  let urlLink = useLocation().pathname.split('/')[1]\n  let [currentLink, changeCurrentLink] = useState(urlLink ? urlLink : 'home');\n  let navbarLinks = {\n    'home' : [],\n    'engineer': [\n      {\n        pageName: 'about',\n        text: 'About',\n      },\n      {\n        pageName: 'portfolio',\n        text: 'Portfolio',\n      },\n      {\n        pageName: 'contact',\n        text: 'Contact'\n      }\n    ],\n    'music': [\n      {\n        pageName: 'about',\n        text: 'About',\n      },\n      {\n        pageName: 'discography',\n        text: 'Discography',\n      },\n      {\n        pageName: 'store',\n        text: 'Store',\n      },\n      {\n        pageName: 'transcriptions',\n        text: 'Sheet&nbsp;Music',\n      },\n      {\n        pageName: 'contact',\n        text: 'Contact'\n      }\n    ],\n    'nerd': []\n  }\n\n  const suspendedPage = (type, match) => {\n    return (\n      <Suspense fallback={<div className=\"white-background-font\">Loading...</div>}>\n        <Page match={match} type={type} />\n      </Suspense>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Header currentLink={currentLink} changeCurrentLink={changeCurrentLink}/>\n      <SplashLinks currentLink={currentLink} changeCurrentLink={changeCurrentLink}/>\n      <Switch>\n        <Route path=\"/engineer\" component={({match})=>{return(suspendedPage('engineer', match))}}/>\n        <Route path=\"/music\" component={({match})=>{return(suspendedPage('music', match))}}/>\n        <Route path=\"/nerd\" component={({match})=>{return(suspendedPage('nerd', match))}}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}